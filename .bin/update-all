#!/bin/bash

SCRIPT_SRC="${BASH_SOURCE[0]}"
SCRIPTPATH=$(dirname "$SCRIPT_SRC")
SCRIPTNAME="$0"

self_update() {
  ### Yadm
  if which yadm &> /dev/null; then
    if [[ "$(yadm rev-parse origin/master)" = "$(yadm ls-remote origin master | cut -f1)" ]]; then
      echo "YADM already at the latest version."
    else
      cd $SCRIPTPATH
      echo "Found a new version of YADM, updating..."
      yadm pull origin master
      exec "$SCRIPTNAME" "$@"
      # Now exit this old instance
      exit 1
    fi
  fi
}

main() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    ### Homebrew
    if which brew &> /dev/null && brew --version &> /dev/null; then
      brew update
      if brew outdated -q | grep -E "^python$" &> /dev/null; then
        TRIGGER_PIPX_REINSTALL="true"
      fi
      brew upgrade && brew upgrade --cask && brew cleanup && brew doctor
    fi
  elif [[ "$OSTYPE" == "linux-gnu" ]]; then
    ### apt get
    if which apt &> /dev/null && apt --version &> /dev/null; then
      sudo apt update
      sudo apt upgrade -y
      sudo apt autoremove
    fi

    ### yum or dnf
    if which dnf &> /dev/null && dnf --version &> /dev/null; then
      sudo dnf upgrade -y
    elif which yum &> /dev/null && yum --version &> /dev/null; then
      sudo yum update -y
    fi

    ### snap
    if which snap &> /dev/null && snap --version &> /dev/null; then
      sudo snap refresh
    fi
    ### flatpak
    if which flatpak &> /dev/null && flatpak --version &> /dev/null; then
      flatpak update -y
    fi
  fi

  ### Pyenv
  if [[ -s "$HOME/.pyenv/plugins/pyenv-update/bin/pyenv-update" ]] &&
    which pyenv &> /dev/null; then
    pyenv update
  fi

  ### Rbenv
  if [[ -s "$HOME/.rbenv/plugins/rbenv-update/bin/rbenv-update" ]] &&
    which rbenv &> /dev/null; then
    rbenv update
  fi

  ### Nodenv
  if [[ -s "$HOME/.nodenv/plugins/nodenv-update/bin/nodenv-update" ]] &&
    which nodenv &> /dev/null; then
    nodenv update
  fi

  ### phpenv
  if which phpenv &> /dev/null; then
    phpenv update
  fi

  ### pipx
  if which pipx &> /dev/null && pipx --version &> /dev/null; then
    if [[ "$TRIGGER_PIPX_REINSTALL" == "true" ]]; then
      ls ${PIPX_HOME:-~/.local/pipx}/venvs | while read line; do rm -r ${PIPX_HOME:-~/.local/pipx}/venvs/$line && pipx install $line; done
    fi
    pipx upgrade-all
  fi

  ### ZimFramework
  if [[ -d "$HOME/.zim" ]]; then
    zsh -c "source \"$HOME/.zim/zimfw.zsh\" upgrade" || true
    zsh -c "source \"$HOME/.zim/zimfw.zsh\" update" || true
  fi

  ### tldr doc util
  if which tldr &> /dev/null; then
    tldr --update
  fi
}

self_update
main
